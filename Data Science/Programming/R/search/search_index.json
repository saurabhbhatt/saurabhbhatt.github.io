{
    "docs": [
        {
            "location": "/", 
            "text": "This tutorial is based on day to day practice of R programming.\n\n\nTable of Contents\n\n\n\n\n\"Some Basics\"\n\n\nDay 1: Printing Something\n\n\nDay 2: Setting Variables\n\n\nDay 3: Listing Variables\n\n\nDay 4: Deleting Variables", 
            "title": "Home"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "\"Some Basics\"  Day 1: Printing Something  Day 2: Setting Variables  Day 3: Listing Variables  Day 4: Deleting Variables", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/Some-Basics/day1/", 
            "text": "Problem\n\n\nHow to display the value of a \nvariable\n or \nexpression\n?\n\n\nSolution\n\n\n\n\nSimply enter the variable name or exprssion at the command prompt, R will print its value. \n\n\nR Produces two type of printing output\n\n\nGeneric output\n using the \nprint\n function \n\n\nCustom formatted output\n using the \ncat\n function\n\n\n\n\n\n\n\n\nDiscussion\n\n\nIt is very easy to print in R. Just hit the \nRun\n on R editor.\n\n\n pi\n[1] 3.141593\n\n sqrt(2)\n[1] 1.414214\n\n\n\nWhen you enter expressions like that, R evaluates the expression and then implicitly calls the \nprint\n function. So the previous example is identical to this:\n\n\n print(pi)\n[1] 3.141593\n\n print(sqrt(2))\n[1] 1.414214\n\n\n\nThe beauty of \nprint\n is that it knows how to format any R value for printing, including structured values such as matrices and lists:\n\n\n print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4\n\n\n print(list(\"a\",\"b\",\"c\"))\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"\n\n\n\nThis is useful because you can always view your data: just \nprint\n it. You needn\u2019t write special printing logic, even for complicated data structures.\n\n\nThe \nprint\n function has a significant limitation, however: it prints only one object at a time. Trying to \nprint\n multiple items gives this mind-numbing error message:\n\n\n print(\"The zero occurs at\", 2*pi, \"radians.\")\nError in print.default(\"The zero occurs at\", 2 * pi, \"radians.\") :\n        unimplemented type 'character' in 'asLogical'\n\n\n\nThe only way to \nprint\n multiple items is to print them one at a time, which probably isn\u2019t what you want:\n\n\n print(\"The zero occurs at\"); print(2*pi); print(\"radians\")\n[1] \"The zero occurs at\"\n[1] 6.283185\n[1] \"radians\"\n\n\n\n\nThe \ncat\n function is an alternative to print that lets you combine multiple items into a continuous output:\n\n\n cat(\"The zero occurs at\", 2*pi, \"radians.\", \"\\n\")\nThe zero occurs at 6.283185 radians.\n\n\n\nNotice that \ncat\n puts a space between each item by default. You must provide a newline character ( \n\\n\n ) to terminate the line. \n\n\nThe \ncat\n function can print simple vectors, too:\n\n\n fib \n- c(0,1,1,2,3,5,8,13,21,34)\n\n cat(\"The first few Fibonacci numbers are:\", fib, \"...\\n\")\nThe first few Fibonacci numbers are: 0 1 1 2 3 5 8 13 21 34 ...\n\n\n\nUsing \ncat\n gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to \ncat\n them only produces another mind-numbing message:\n\n\n cat(list(\"a\",\"b\",\"c\"))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type 'list') cannot be handled by 'cat'\n\n\n\nPlease try the above examples in your R Console or the console which I provided below.\n\n\nConsole", 
            "title": "Day 1 : Printing Something"
        }, 
        {
            "location": "/Some-Basics/day1/#problem", 
            "text": "How to display the value of a  variable  or  expression ?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day1/#solution", 
            "text": "Simply enter the variable name or exprssion at the command prompt, R will print its value.   R Produces two type of printing output  Generic output  using the  print  function   Custom formatted output  using the  cat  function", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day1/#discussion", 
            "text": "It is very easy to print in R. Just hit the  Run  on R editor.   pi\n[1] 3.141593  sqrt(2)\n[1] 1.414214  When you enter expressions like that, R evaluates the expression and then implicitly calls the  print  function. So the previous example is identical to this:   print(pi)\n[1] 3.141593  print(sqrt(2))\n[1] 1.414214  The beauty of  print  is that it knows how to format any R value for printing, including structured values such as matrices and lists:   print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4  print(list(\"a\",\"b\",\"c\"))\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"  This is useful because you can always view your data: just  print  it. You needn\u2019t write special printing logic, even for complicated data structures.  The  print  function has a significant limitation, however: it prints only one object at a time. Trying to  print  multiple items gives this mind-numbing error message:   print(\"The zero occurs at\", 2*pi, \"radians.\")\nError in print.default(\"The zero occurs at\", 2 * pi, \"radians.\") :\n        unimplemented type 'character' in 'asLogical'  The only way to  print  multiple items is to print them one at a time, which probably isn\u2019t what you want:   print(\"The zero occurs at\"); print(2*pi); print(\"radians\")\n[1] \"The zero occurs at\"\n[1] 6.283185\n[1] \"radians\"  \nThe  cat  function is an alternative to print that lets you combine multiple items into a continuous output:   cat(\"The zero occurs at\", 2*pi, \"radians.\", \"\\n\")\nThe zero occurs at 6.283185 radians.  Notice that  cat  puts a space between each item by default. You must provide a newline character (  \\n  ) to terminate the line.   The  cat  function can print simple vectors, too:   fib  - c(0,1,1,2,3,5,8,13,21,34)  cat(\"The first few Fibonacci numbers are:\", fib, \"...\\n\")\nThe first few Fibonacci numbers are: 0 1 1 2 3 5 8 13 21 34 ...  Using  cat  gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to  cat  them only produces another mind-numbing message:   cat(list(\"a\",\"b\",\"c\"))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type 'list') cannot be handled by 'cat'  Please try the above examples in your R Console or the console which I provided below.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day1/#console", 
            "text": "", 
            "title": "Console"
        }, 
        {
            "location": "/Some-Basics/day2/", 
            "text": "Problem\n\n\nHow do we save a value in a variable?\n\n\nSolution\n\n\nUse the assignment operator ( \n-\n or \n=\n). There is \nno\n need to declare your variable first:\n\n\n x \n- 3\n\n\n\nDiscussion\n\n\nUsing R in \u201ccalculator mode\u201d gets old pretty fast. Soon you will want to define variables and save values in them. This reduces typing, saves time, and clarifies your work.\n\n\nThere is no need to declare or explicitly create variables in R. Just assign a value to the name and R will create the variable:\n\n\n x \n- 3\n\n y \n- 4\n\n z \n- sqrt(x^2 + y^2)\n\n print(z)\n[1] 5\n\n\n\nNotice that the assignment operator is formed from a less-than character ( \n) and a hyphen ( \n-\n ) with no space between them.\n\n\n\n\n\nWhen you define a variable at the command prompt like this, the variable is held in your \nworkspace\n. The workspace is held in the computer\u2019s main memory but can be saved to disk when you exit from R. The variable definition remains in the workspace until you remove it.\n\n\n\n\n\nR is a \ndynamically typed language\n, which means that we can change a variable\u2019s data type at will. We could set \nx\n to be numeric, as just shown, and then turn around and immediately overwrite that with (say) a vector of character strings. R will not complain:\n\n\n print(x)\n[1] 3\n\n x \n- c(\"fee\", \"fie\", \"foe\", \"fum\")\n\n print(x)\n[1] \"fee\" \"fie\" \"foe\" \"fum\"\n\n\n\n\n\n\nIn some R functions you will see assignment statements that use the strange-looking assignment operator \n-\n :\n\n\nx \n- 3\n\n\n\nThat forces the assignment to a global variable rather than a local variable.\n\n\n\n\n\nIn the spirit of full disclosure, I will reveal that R also supports two other forms of assignment statements. A single equal sign ( \n=\n ) can be used as an assignment operator at the command prompt. A rightward assignment operator ( \n-\n ) can be used anywhere the leftward assignment operator ( \n-\n ) can be used:\n\n\n foo = 3\n\n print(foo)\n[1] 3\n\n 5 -\n fum\n\n print(fum)\n[1] 5\n\n\n\n\n\n\nI recommend that you should avoid \n=\n and \n-\n \n\n\n\n\nThe equals-sign assignment (\n=\n) is easily confused with the test for equality. \n\n\nThe rightward assignment (\n-\n) is just too unconventional and, worse, becomes difficult to read when the expression is long.", 
            "title": "Day 2 : Setting Variables"
        }, 
        {
            "location": "/Some-Basics/day2/#problem", 
            "text": "How do we save a value in a variable?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day2/#solution", 
            "text": "Use the assignment operator (  -  or  = ). There is  no  need to declare your variable first:   x  - 3", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day2/#discussion", 
            "text": "Using R in \u201ccalculator mode\u201d gets old pretty fast. Soon you will want to define variables and save values in them. This reduces typing, saves time, and clarifies your work.  There is no need to declare or explicitly create variables in R. Just assign a value to the name and R will create the variable:   x  - 3  y  - 4  z  - sqrt(x^2 + y^2)  print(z)\n[1] 5  Notice that the assignment operator is formed from a less-than character (  ) and a hyphen (  -  ) with no space between them.   When you define a variable at the command prompt like this, the variable is held in your  workspace . The workspace is held in the computer\u2019s main memory but can be saved to disk when you exit from R. The variable definition remains in the workspace until you remove it.   R is a  dynamically typed language , which means that we can change a variable\u2019s data type at will. We could set  x  to be numeric, as just shown, and then turn around and immediately overwrite that with (say) a vector of character strings. R will not complain:   print(x)\n[1] 3  x  - c(\"fee\", \"fie\", \"foe\", \"fum\")  print(x)\n[1] \"fee\" \"fie\" \"foe\" \"fum\"   In some R functions you will see assignment statements that use the strange-looking assignment operator  -  :  x  - 3  That forces the assignment to a global variable rather than a local variable.   In the spirit of full disclosure, I will reveal that R also supports two other forms of assignment statements. A single equal sign (  =  ) can be used as an assignment operator at the command prompt. A rightward assignment operator (  -  ) can be used anywhere the leftward assignment operator (  -  ) can be used:   foo = 3  print(foo)\n[1] 3  5 -  fum  print(fum)\n[1] 5   I recommend that you should avoid  =  and  -     The equals-sign assignment ( = ) is easily confused with the test for equality.   The rightward assignment ( - ) is just too unconventional and, worse, becomes difficult to read when the expression is long.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day3/", 
            "text": "Problem\n\n\nWhat are the variables or functions defined in my workspace?\n\n\nSolution\n\n\n\n\nUse the \nls\n function. \n\n\nUse \nls.str\n for more details about each variable.\n\n\n\n\nDiscussion\n\n\nThe \nls\n function displays the names of objects in your workspace:\n\n\n x \n- 10\n\n y \n- 50\n\n z \n- c(\"three\", \"blind\", \"mice\")\n\n\n f \n- function(n,p) sqrt(p*(1-p)/n)\n\n ls()\n[1] \"f\" \"x\" \"y\" \"z\"\n\n\n\nNotice that \nls\n returns a vector of character strings in which each string is the name of one variable or function. When your workspace is empty, \nls\n returns an empty vector, which produces this puzzling output:\n\n\n ls()\ncharacter(0)\n\n\n\nThat is R\u2019s quaint way of saying that \nls\n returned a zero-length vector of strings; that is, it returned an empty vector because nothing is defined in your workspace.\n\n\n\n\n\nIf you want more than just a list of names, try \nls.str\n ; this will also tell you something about each variable:\n\n\n ls.str()\nf : function (n, p)\nx : num 10\ny : num 50\nz : chr [1:3] \"three\" \"blind\" \"mice\"\n\n\n\nThe function is called \nls.str\n because it is both listing your variables and applying the \nstr\n function to them, showing their structure.\n\n\n\n\n\nOrdinarily, \nls\n does not return any name that begins with a dot ( \n.\n). Such names are considered hidden and are not normally of interest to users. (This mirrors the Unix convention of not listing files whose names begin with dot.) You can force \nls\n to list everything by setting the \nall.names\n argument to \nTRUE\n :\n\n\n .hidvar \n- 10\n\n\n ls()\n[1] \"f\" \"x\" \"y\" \"z\"\n\n\n ls(all.names=TRUE)\n[1] \".hidvar\" \"f\" \"x\" \"y\" \"z\"", 
            "title": "Day 3 : Listing Variables"
        }, 
        {
            "location": "/Some-Basics/day3/#problem", 
            "text": "What are the variables or functions defined in my workspace?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day3/#solution", 
            "text": "Use the  ls  function.   Use  ls.str  for more details about each variable.", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day3/#discussion", 
            "text": "The  ls  function displays the names of objects in your workspace:   x  - 10  y  - 50  z  - c(\"three\", \"blind\", \"mice\")  f  - function(n,p) sqrt(p*(1-p)/n)  ls()\n[1] \"f\" \"x\" \"y\" \"z\"  Notice that  ls  returns a vector of character strings in which each string is the name of one variable or function. When your workspace is empty,  ls  returns an empty vector, which produces this puzzling output:   ls()\ncharacter(0)  That is R\u2019s quaint way of saying that  ls  returned a zero-length vector of strings; that is, it returned an empty vector because nothing is defined in your workspace.   If you want more than just a list of names, try  ls.str  ; this will also tell you something about each variable:   ls.str()\nf : function (n, p)\nx : num 10\ny : num 50\nz : chr [1:3] \"three\" \"blind\" \"mice\"  The function is called  ls.str  because it is both listing your variables and applying the  str  function to them, showing their structure.   Ordinarily,  ls  does not return any name that begins with a dot (  . ). Such names are considered hidden and are not normally of interest to users. (This mirrors the Unix convention of not listing files whose names begin with dot.) You can force  ls  to list everything by setting the  all.names  argument to  TRUE  :   .hidvar  - 10  ls()\n[1] \"f\" \"x\" \"y\" \"z\"  ls(all.names=TRUE)\n[1] \".hidvar\" \"f\" \"x\" \"y\" \"z\"", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day4/", 
            "text": "Work in Progress", 
            "title": "Day 4 : Deleting Variables"
        }
    ]
}