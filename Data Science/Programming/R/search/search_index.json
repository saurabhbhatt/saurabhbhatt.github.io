{
    "docs": [
        {
            "location": "/", 
            "text": "This tutorial is based on day to day practice of R programming.\n\n\nTable of Contents\n\n\n\n\n\"Some Basics\"\n\n\nDay 1: Printing Something\n\n\nDay 2: Setting Variables", 
            "title": "Home"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "\"Some Basics\"  Day 1: Printing Something  Day 2: Setting Variables", 
            "title": "Table of Contents"
        }, 
        {
            "location": "/Some-Basics/day1/", 
            "text": "Problem\n\n\nHow to display the value of a \nvariable\n or \nexpression\n?\n\n\nSolution\n\n\n\n\nSimply enter the variable name or exprssion at the command prompt, R will print its value. \n\n\nR Produces two type of printing output\n\n\nGeneric output\n using the \nprint\n function \n\n\nCustom formatted output\n using the \ncat\n function\n\n\n\n\n\n\n\n\nDiscussion\n\n\nIt is very easy to print in R. Just hit the \nRun\n on R editor.\n\n\n pi\n[1] 3.141593\n\n sqrt(2)\n[1] 1.414214\n\n\n\nWhen you enter expressions like that, R evaluates the expression and then implicitly calls the \nprint\n function. So the previous example is identical to this:\n\n\n print(pi)\n[1] 3.141593\n\n print(sqrt(2))\n[1] 1.414214\n\n\n\nThe beauty of \nprint\n is that it knows how to format any R value for printing, including structured values such as matrices and lists:\n\n\n print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4\n\n\n print(list(\"a\",\"b\",\"c\"))\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"\n\n\n\nThis is useful because you can always view your data: just \nprint\n it. You needn\u2019t write special printing logic, even for complicated data structures.\n\n\nThe \nprint\n function has a significant limitation, however: it prints only one object at a time. Trying to \nprint\n multiple items gives this mind-numbing error message:\n\n\n print(\"The zero occurs at\", 2*pi, \"radians.\")\nError in print.default(\"The zero occurs at\", 2 * pi, \"radians.\") :\n        unimplemented type 'character' in 'asLogical'\n\n\n\nThe only way to \nprint\n multiple items is to print them one at a time, which probably isn\u2019t what you want:\n\n\n print(\"The zero occurs at\"); print(2*pi); print(\"radians\")\n[1] \"The zero occurs at\"\n[1] 6.283185\n[1] \"radians\"\n\n\n\n\nThe \ncat\n function is an alternative to print that lets you combine multiple items into a continuous output:\n\n\n cat(\"The zero occurs at\", 2*pi, \"radians.\", \"\\n\")\nThe zero occurs at 6.283185 radians.\n\n\n\nNotice that \ncat\n puts a space between each item by default. You must provide a newline character ( \n\\n\n ) to terminate the line. \n\n\nThe \ncat\n function can print simple vectors, too:\n\n\n fib \n- c(0,1,1,2,3,5,8,13,21,34)\n\n cat(\"The first few Fibonacci numbers are:\", fib, \"...\\n\")\nThe first few Fibonacci numbers are: 0 1 1 2 3 5 8 13 21 34 ...\n\n\n\nUsing \ncat\n gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to \ncat\n them only produces another mindnumbing message:\n\n\n cat(list(\"a\",\"b\",\"c\"))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type 'list') cannot be handled by 'cat'\n\n\n\nPlease try the above examples in your R Console or the console which I provided below.\n\n\nConsole", 
            "title": "Day 1 : Printing Something"
        }, 
        {
            "location": "/Some-Basics/day1/#problem", 
            "text": "How to display the value of a  variable  or  expression ?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day1/#solution", 
            "text": "Simply enter the variable name or exprssion at the command prompt, R will print its value.   R Produces two type of printing output  Generic output  using the  print  function   Custom formatted output  using the  cat  function", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day1/#discussion", 
            "text": "It is very easy to print in R. Just hit the  Run  on R editor.   pi\n[1] 3.141593  sqrt(2)\n[1] 1.414214  When you enter expressions like that, R evaluates the expression and then implicitly calls the  print  function. So the previous example is identical to this:   print(pi)\n[1] 3.141593  print(sqrt(2))\n[1] 1.414214  The beauty of  print  is that it knows how to format any R value for printing, including structured values such as matrices and lists:   print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4  print(list(\"a\",\"b\",\"c\"))\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"  This is useful because you can always view your data: just  print  it. You needn\u2019t write special printing logic, even for complicated data structures.  The  print  function has a significant limitation, however: it prints only one object at a time. Trying to  print  multiple items gives this mind-numbing error message:   print(\"The zero occurs at\", 2*pi, \"radians.\")\nError in print.default(\"The zero occurs at\", 2 * pi, \"radians.\") :\n        unimplemented type 'character' in 'asLogical'  The only way to  print  multiple items is to print them one at a time, which probably isn\u2019t what you want:   print(\"The zero occurs at\"); print(2*pi); print(\"radians\")\n[1] \"The zero occurs at\"\n[1] 6.283185\n[1] \"radians\"  \nThe  cat  function is an alternative to print that lets you combine multiple items into a continuous output:   cat(\"The zero occurs at\", 2*pi, \"radians.\", \"\\n\")\nThe zero occurs at 6.283185 radians.  Notice that  cat  puts a space between each item by default. You must provide a newline character (  \\n  ) to terminate the line.   The  cat  function can print simple vectors, too:   fib  - c(0,1,1,2,3,5,8,13,21,34)  cat(\"The first few Fibonacci numbers are:\", fib, \"...\\n\")\nThe first few Fibonacci numbers are: 0 1 1 2 3 5 8 13 21 34 ...  Using  cat  gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to  cat  them only produces another mindnumbing message:   cat(list(\"a\",\"b\",\"c\"))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type 'list') cannot be handled by 'cat'  Please try the above examples in your R Console or the console which I provided below.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day1/#console", 
            "text": "", 
            "title": "Console"
        }, 
        {
            "location": "/Some-Basics/day2/", 
            "text": "Work in progress", 
            "title": "Day 2 : Setting Variables"
        }
    ]
}