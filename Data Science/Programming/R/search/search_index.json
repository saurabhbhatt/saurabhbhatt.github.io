{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started\n\n\nThis tutorial is based on day to day practice of R programming. Better understanding will generate when it will be practicing more.\n\n\nSome Basics\n\n\n\n\nDay 1 : Printing Something\n\n\nDay 2 : Setting Variables\n\n\nDay 3 : Listing Variables\n\n\nDay 4 : Deleting Variables\n\n\nDay 5 : Creating a Vector\n\n\nDay 6 : Computing Basic Statistics\n\n\nDay 7 : Creating Sequence\n\n\nDay 8 : Comparing Vectors\n\n\nDay 9 : Selecting Vector Elements\n\n\nDay 10 : Performing Vector Arithmetic\n\n\nDay 11 : Getting Operator Precedence Right\n\n\nDay 12 : Defining a Function\n\n\nDay 13 : Typing Less \n Accomplish More\n\n\nDay 14 : Avoiding Some Common Mistakes\n\n\n\n\nAssignment 1: Laser Problem", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#getting-started", 
            "text": "This tutorial is based on day to day practice of R programming. Better understanding will generate when it will be practicing more.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#some-basics", 
            "text": "Day 1 : Printing Something  Day 2 : Setting Variables  Day 3 : Listing Variables  Day 4 : Deleting Variables  Day 5 : Creating a Vector  Day 6 : Computing Basic Statistics  Day 7 : Creating Sequence  Day 8 : Comparing Vectors  Day 9 : Selecting Vector Elements  Day 10 : Performing Vector Arithmetic  Day 11 : Getting Operator Precedence Right  Day 12 : Defining a Function  Day 13 : Typing Less   Accomplish More  Day 14 : Avoiding Some Common Mistakes", 
            "title": "Some Basics"
        }, 
        {
            "location": "/#assignment-1-laser-problem", 
            "text": "", 
            "title": "Assignment 1: Laser Problem"
        }, 
        {
            "location": "/Some-Basics/day1/", 
            "text": "Day 1 : Printing Something\n\n\nProblem\n\n\nHow to display the value of a \nvariable\n or \nexpression\n?\n\n\nSolution\n\n\n\n\nSimply enter the variable name or exprssion at the command prompt, R will print its value. \n\n\nR Produces two type of printing output\n\n\nGeneric output\n using the \nprint\n function \n\n\nCustom formatted output\n using the \ncat\n function\n\n\n\n\n\n\n\n\nDiscussion\n\n\nIt is very easy to print in R. Just hit the \nRun\n on R editor.\n\n\n1\n2\n3\n4\n pi\n[1] 3.141593\n\n sqrt(2)\n[1] 1.414214\n\n\n\n\n\n\nWhen you enter expressions like that, R evaluates the expression and then implicitly calls the \nprint\n function. So the previous example is identical to this:\n\n\n1\n2\n3\n4\n print(pi)\n[1] 3.141593\n\n print(sqrt(2))\n[1] 1.414214\n\n\n\n\n\n\nThe beauty of \nprint\n is that it knows how to format any R value for printing, including structured values such as matrices and lists:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4\n\n\n print(list(\na\n,\nb\n,\nc\n))\n[[1]]\n[1] \na\n\n\n[[2]]\n[1] \nb\n\n\n[[3]]\n[1] \nc\n\n\n\n\n\n\n\nThis is useful because you can always view your data: just \nprint\n it. You needn\u2019t write special printing logic, even for complicated data structures.\n\n\nThe \nprint\n function has a significant limitation, however: it prints only one object at a time. Trying to \nprint\n multiple items gives this mind-numbing error message:\n\n\n1\n2\n3\n print(\nThe zero occurs at\n, 2*pi, \nradians.\n)\nError in print.default(\nThe zero occurs at\n, 2 * pi, \nradians.\n) :\n        unimplemented type \ncharacter\n in \nasLogical\n\n\n\n\n\n\n\nThe only way to \nprint\n multiple items is to print them one at a time, which probably isn\u2019t what you want:\n\n\n1\n2\n3\n4\n print(\nThe zero occurs at\n); print(2*pi); print(\nradians\n)\n[1] \nThe zero occurs at\n\n[1] 6.283185\n[1] \nradians\n\n\n\n\n\n\n\n\nThe \ncat\n function is an alternative to print that lets you combine multiple items into a continuous output:\n\n\n1\n2\n cat(\nThe zero occurs at\n, 2*pi, \nradians.\n, \n\\n\n)\nThe zero occurs at 6.283185 radians.\n\n\n\n\n\n\nNotice that \ncat\n puts a space between each item by default. You must provide a newline character ( \n\\n\n ) to terminate the line. \n\n\nThe \ncat\n function can print simple vectors, too:\n\n\n1\n2\n3\n fib \n-\n \nc\n(\n0\n,\n1\n,\n1\n,\n2\n,\n3\n,\n5\n,\n8\n,\n13\n,\n21\n,\n34\n)\n\n\n \ncat\n(\nThe first few Fibonacci numbers are:\n,\n fib\n,\n \n...\\n\n)\n\nThe first few Fibonacci numbers are\n:\n \n0\n \n1\n \n1\n \n2\n \n3\n \n5\n \n8\n \n13\n \n21\n \n34\n \n...\n\n\n\n\n\n\n\nUsing \ncat\n gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to \ncat\n them only produces another mind-numbing message:\n\n\n1\n2\n3\n cat(list(\na\n,\nb\n,\nc\n))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type \nlist\n) cannot be handled by \ncat\n\n\n\n\n\n\n\nPlease try the above examples in your R Console or the console which I provided below.", 
            "title": "Day 1 : Printing Something"
        }, 
        {
            "location": "/Some-Basics/day1/#day-1-printing-something", 
            "text": "", 
            "title": "Day 1 : Printing Something"
        }, 
        {
            "location": "/Some-Basics/day1/#problem", 
            "text": "How to display the value of a  variable  or  expression ?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day1/#solution", 
            "text": "Simply enter the variable name or exprssion at the command prompt, R will print its value.   R Produces two type of printing output  Generic output  using the  print  function   Custom formatted output  using the  cat  function", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day1/#discussion", 
            "text": "It is very easy to print in R. Just hit the  Run  on R editor.  1\n2\n3\n4  pi\n[1] 3.141593  sqrt(2)\n[1] 1.414214   When you enter expressions like that, R evaluates the expression and then implicitly calls the  print  function. So the previous example is identical to this:  1\n2\n3\n4  print(pi)\n[1] 3.141593  print(sqrt(2))\n[1] 1.414214   The beauty of  print  is that it knows how to format any R value for printing, including structured values such as matrices and lists:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14  print(matrix(c(1,2,3,4), 2, 2))\n    [,1] [,2]\n[1,]   1    3\n[2,]   2    4  print(list( a , b , c ))\n[[1]]\n[1]  a \n\n[[2]]\n[1]  b \n\n[[3]]\n[1]  c    This is useful because you can always view your data: just  print  it. You needn\u2019t write special printing logic, even for complicated data structures.  The  print  function has a significant limitation, however: it prints only one object at a time. Trying to  print  multiple items gives this mind-numbing error message:  1\n2\n3  print( The zero occurs at , 2*pi,  radians. )\nError in print.default( The zero occurs at , 2 * pi,  radians. ) :\n        unimplemented type  character  in  asLogical    The only way to  print  multiple items is to print them one at a time, which probably isn\u2019t what you want:  1\n2\n3\n4  print( The zero occurs at ); print(2*pi); print( radians )\n[1]  The zero occurs at \n[1] 6.283185\n[1]  radians    \nThe  cat  function is an alternative to print that lets you combine multiple items into a continuous output:  1\n2  cat( The zero occurs at , 2*pi,  radians. ,  \\n )\nThe zero occurs at 6.283185 radians.   Notice that  cat  puts a space between each item by default. You must provide a newline character (  \\n  ) to terminate the line.   The  cat  function can print simple vectors, too:  1\n2\n3  fib  -   c ( 0 , 1 , 1 , 2 , 3 , 5 , 8 , 13 , 21 , 34 )    cat ( The first few Fibonacci numbers are: ,  fib ,   ...\\n ) \nThe first few Fibonacci numbers are :   0   1   1   2   3   5   8   13   21   34   ...    Using  cat  gives you more control over your output, which makes it especially useful in R scripts. A serious limitation, however, is that it cannot print compound data structures such as matrices and lists. Trying to  cat  them only produces another mind-numbing message:  1\n2\n3  cat(list( a , b , c ))\nError in cat(list(...), file, sep, fill, labels, append) :\n        argument 1 (type  list ) cannot be handled by  cat    Please try the above examples in your R Console or the console which I provided below.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day2/", 
            "text": "Day 2 : Setting Variables\n\n\nProblem\n\n\nHow do we save a value in a variable?\n\n\nSolution\n\n\nUse the assignment operator ( \n-\n or \n=\n). There is \nno\n need to declare your variable first:\n\n\n1\n x \n-\n \n3\n\n\n\n\n\n\n\nDiscussion\n\n\nUsing R in \u201ccalculator mode\u201d gets old pretty fast. Soon you will want to define variables and save values in them. This reduces typing, saves time, and clarifies your work.\n\n\nThere is no need to declare or explicitly create variables in R. Just assign a value to the name and R will create the variable:\n\n\n1\n2\n3\n4\n5\n x \n-\n \n3\n\n\n y \n-\n \n4\n\n\n z \n-\n \nsqrt\n(\nx\n^\n2\n \n+\n y\n^\n2\n)\n\n\n \nprint\n(\nz\n)\n\n\n[\n1\n]\n \n5\n\n\n\n\n\n\n\nNotice that the assignment operator is formed from a less-than character ( \n) and a hyphen ( \n-\n ) with no space between them.\n\n\n\n\n\nWhen you define a variable at the command prompt like this, the variable is held in your \nworkspace\n. The workspace is held in the computer\u2019s main memory but can be saved to disk when you exit from R. The variable definition remains in the workspace until you remove it.\n\n\n\n\n\nR is a \ndynamically typed language\n, which means that we can change a variable\u2019s data type at will. We could set \nx\n to be numeric, as just shown, and then turn around and immediately overwrite that with (say) a vector of character strings. R will not complain:\n\n\n1\n2\n3\n4\n5\n \nprint\n(\nx\n)\n\n\n[\n1\n]\n \n3\n\n\n x \n-\n \nc\n(\nfee\n,\n \nfie\n,\n \nfoe\n,\n \nfum\n)\n\n\n \nprint\n(\nx\n)\n\n\n[\n1\n]\n \nfee\n \nfie\n \nfoe\n \nfum\n\n\n\n\n\n\n\n\n\n\nIn some R functions you will see assignment statements that use the strange-looking assignment operator \n-\n :\n\n\n1\nx \n- 3\n\n\n\n\n\n\nThat forces the assignment to a global variable rather than a local variable.\n\n\n\n\n\nIn the spirit of full disclosure, I will reveal that R also supports two other forms of assignment statements. A single equal sign ( \n=\n ) can be used as an assignment operator at the command prompt. A rightward assignment operator ( \n-\n ) can be used anywhere the leftward assignment operator ( \n-\n ) can be used:\n\n\n1\n2\n3\n4\n5\n6\n foo = 3\n\n print(foo)\n[1] 3\n\n 5 -\n fum\n\n print(fum)\n[1] 5\n\n\n\n\n\n\n\n\n\nI recommend that you should avoid \n=\n and \n-\n \n\n\n\n\nThe equals-sign assignment (\n=\n) is easily confused with the test for equality. \n\n\nThe rightward assignment (\n-\n) is just too unconventional and, worse, becomes difficult to read when the expression is long.", 
            "title": "Day 2 : Setting Variables"
        }, 
        {
            "location": "/Some-Basics/day2/#day-2-setting-variables", 
            "text": "", 
            "title": "Day 2 : Setting Variables"
        }, 
        {
            "location": "/Some-Basics/day2/#problem", 
            "text": "How do we save a value in a variable?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day2/#solution", 
            "text": "Use the assignment operator (  -  or  = ). There is  no  need to declare your variable first:  1  x  -   3", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day2/#discussion", 
            "text": "Using R in \u201ccalculator mode\u201d gets old pretty fast. Soon you will want to define variables and save values in them. This reduces typing, saves time, and clarifies your work.  There is no need to declare or explicitly create variables in R. Just assign a value to the name and R will create the variable:  1\n2\n3\n4\n5  x  -   3   y  -   4   z  -   sqrt ( x ^ 2   +  y ^ 2 )    print ( z )  [ 1 ]   5    Notice that the assignment operator is formed from a less-than character (  ) and a hyphen (  -  ) with no space between them.   When you define a variable at the command prompt like this, the variable is held in your  workspace . The workspace is held in the computer\u2019s main memory but can be saved to disk when you exit from R. The variable definition remains in the workspace until you remove it.   R is a  dynamically typed language , which means that we can change a variable\u2019s data type at will. We could set  x  to be numeric, as just shown, and then turn around and immediately overwrite that with (say) a vector of character strings. R will not complain:  1\n2\n3\n4\n5   print ( x )  [ 1 ]   3   x  -   c ( fee ,   fie ,   foe ,   fum )    print ( x )  [ 1 ]   fee   fie   foe   fum     In some R functions you will see assignment statements that use the strange-looking assignment operator  -  :  1 x  - 3   That forces the assignment to a global variable rather than a local variable.   In the spirit of full disclosure, I will reveal that R also supports two other forms of assignment statements. A single equal sign (  =  ) can be used as an assignment operator at the command prompt. A rightward assignment operator (  -  ) can be used anywhere the leftward assignment operator (  -  ) can be used:  1\n2\n3\n4\n5\n6  foo = 3  print(foo)\n[1] 3  5 -  fum  print(fum)\n[1] 5    I recommend that you should avoid  =  and  -     The equals-sign assignment ( = ) is easily confused with the test for equality.   The rightward assignment ( - ) is just too unconventional and, worse, becomes difficult to read when the expression is long.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day3/", 
            "text": "Day 3 : Listing Variables\n\n\nProblem\n\n\nWhat are the variables or functions defined in my workspace?\n\n\nSolution\n\n\n\n\nUse the \nls\n function. \n\n\nUse \nls.str\n for more details about each variable.\n\n\n\n\nDiscussion\n\n\nThe \nls\n function displays the names of objects in your workspace:\n\n\n1\n2\n3\n4\n5\n6\n7\n x \n-\n \n10\n\n\n y \n-\n \n50\n\n\n z \n-\n \nc\n(\nthree\n,\n \nblind\n,\n \nmice\n)\n\n\n\n f \n-\n \nfunction\n(\nn\n,\np\n)\n \nsqrt\n(\np\n*\n(\n1\n-\np\n)\n/\nn\n)\n\n\n \nls\n()\n\n\n[\n1\n]\n \nf\n \nx\n \ny\n \nz\n\n\n\n\n\n\n\nNotice that \nls\n returns a vector of character strings in which each string is the name of one variable or function. When your workspace is empty, \nls\n returns an empty vector, which produces this puzzling output:\n\n\n1\n2\n ls()\ncharacter(0)\n\n\n\n\n\n\nThat is R\u2019s quaint way of saying that \nls\n returned a zero-length vector of strings; that is, it returned an empty vector because nothing is defined in your workspace.\n\n\n\n\n\nIf you want more than just a list of names, try \nls.str\n ; this will also tell you something about each variable:\n\n\n1\n2\n3\n4\n5\n ls.str()\nf : function (n, p)\nx : num 10\ny : num 50\nz : chr [1:3] \nthree\n \nblind\n \nmice\n\n\n\n\n\n\n\nThe function is called \nls.str\n because it is both listing your variables and applying the \nstr\n function to them, showing their structure.\n\n\n\n\n\nOrdinarily, \nls\n does not return any name that begins with a dot ( \n.\n). Such names are considered hidden and are not normally of interest to users. (This mirrors the Unix convention of not listing files whose names begin with dot.) You can force \nls\n to list everything by setting the \nall.names\n argument to \nTRUE\n :\n\n\n1\n2\n3\n4\n5\n6\n7\n \n.\nhidvar \n-\n \n10\n\n\n\n \nls\n()\n\n\n[\n1\n]\n \nf\n \nx\n \ny\n \nz\n\n\n\n \nls\n(\nall.names\n=\nTRUE\n)\n\n\n[\n1\n]\n \n.hidvar\n \nf\n \nx\n \ny\n \nz", 
            "title": "Day 3 : Listing Variables"
        }, 
        {
            "location": "/Some-Basics/day3/#day-3-listing-variables", 
            "text": "", 
            "title": "Day 3 : Listing Variables"
        }, 
        {
            "location": "/Some-Basics/day3/#problem", 
            "text": "What are the variables or functions defined in my workspace?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day3/#solution", 
            "text": "Use the  ls  function.   Use  ls.str  for more details about each variable.", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day3/#discussion", 
            "text": "The  ls  function displays the names of objects in your workspace:  1\n2\n3\n4\n5\n6\n7  x  -   10   y  -   50   z  -   c ( three ,   blind ,   mice )   f  -   function ( n , p )   sqrt ( p * ( 1 - p ) / n )    ls ()  [ 1 ]   f   x   y   z    Notice that  ls  returns a vector of character strings in which each string is the name of one variable or function. When your workspace is empty,  ls  returns an empty vector, which produces this puzzling output:  1\n2  ls()\ncharacter(0)   That is R\u2019s quaint way of saying that  ls  returned a zero-length vector of strings; that is, it returned an empty vector because nothing is defined in your workspace.   If you want more than just a list of names, try  ls.str  ; this will also tell you something about each variable:  1\n2\n3\n4\n5  ls.str()\nf : function (n, p)\nx : num 10\ny : num 50\nz : chr [1:3]  three   blind   mice    The function is called  ls.str  because it is both listing your variables and applying the  str  function to them, showing their structure.   Ordinarily,  ls  does not return any name that begins with a dot (  . ). Such names are considered hidden and are not normally of interest to users. (This mirrors the Unix convention of not listing files whose names begin with dot.) You can force  ls  to list everything by setting the  all.names  argument to  TRUE  :  1\n2\n3\n4\n5\n6\n7   . hidvar  -   10    ls ()  [ 1 ]   f   x   y   z    ls ( all.names = TRUE )  [ 1 ]   .hidvar   f   x   y   z", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day4/", 
            "text": "Day 4 : Deleting Variables\n\n\nProblem\n\n\nHow do we remove unneeded variables or functions from our workspace or How to erase its contents completely?\n\n\nSolution\n\n\n\n\nUse the \nrm\n function\n\n\n\n\nDiscussion\n\n\nYour workspace can get cluttered quickly. The \nrm\n function removes, permanently, one or more objects from the workspace:\n\n\n1\n2\n3\n4\n5\n6\n7\n x \n-\n \n2\n*\npi\n\n\n x\n\n[\n1\n]\n \n6.283185\n\n\n\n \nrm\n(\nx\n)\n\n\n x\nError\n:\n object \nx\n not found\n\n\n\n\n\n\nThere is no \n\u201cundo\u201d\n; once the variable is gone, it\u2019s gone. You can remove several variables at once:\n\n\n1\n rm(x,y,z)\n\n\n\n\n\n\nYou can even erase your entire workspace at once. The \nrm\n function has a list argument consisting of a vector of names of variables to remove. Recall that the \nls\n function returns a vector of variables names; hence you can combine \nrm\n and \nls\n to erase everything:\n\n\n1\n2\n3\n4\n5\n6\n ls()\n[1] \nf\n \nx\n \ny\n \nz\n\n\n\n rm(list=ls())\n\n ls()\ncharacter(0)\n\n\n\n\n\n\n\n\nBe Polite\n\n\nNever put \nrm(list=ls())\n into code you share with others, such as a library function or sample code sent to a mailing list. Deleting all the variables in someone else\u2019s workspace is worse than rude and will make you extremely unpopular.", 
            "title": "Day 4 : Deleting Variables"
        }, 
        {
            "location": "/Some-Basics/day4/#day-4-deleting-variables", 
            "text": "", 
            "title": "Day 4 : Deleting Variables"
        }, 
        {
            "location": "/Some-Basics/day4/#problem", 
            "text": "How do we remove unneeded variables or functions from our workspace or How to erase its contents completely?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day4/#solution", 
            "text": "Use the  rm  function", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day4/#discussion", 
            "text": "Your workspace can get cluttered quickly. The  rm  function removes, permanently, one or more objects from the workspace:  1\n2\n3\n4\n5\n6\n7  x  -   2 * pi   x [ 1 ]   6.283185    rm ( x )   x\nError :  object  x  not found   There is no  \u201cundo\u201d ; once the variable is gone, it\u2019s gone. You can remove several variables at once:  1  rm(x,y,z)   You can even erase your entire workspace at once. The  rm  function has a list argument consisting of a vector of names of variables to remove. Recall that the  ls  function returns a vector of variables names; hence you can combine  rm  and  ls  to erase everything:  1\n2\n3\n4\n5\n6  ls()\n[1]  f   x   y   z   rm(list=ls())  ls()\ncharacter(0)    Be Polite  Never put  rm(list=ls())  into code you share with others, such as a library function or sample code sent to a mailing list. Deleting all the variables in someone else\u2019s workspace is worse than rude and will make you extremely unpopular.", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day5/", 
            "text": "Day 5 : Creating a Vector\n\n\nProblem\n\n\nHow can we create a vector?\n\n\nSolution\n\n\n\n\nUse the \nc(...)\n operator to construct a vector from given values.\n\n\n\n\nDiscussion\n\n\nVectors are a central component of R, not just another data structure. A vector can contain either numbers, strings, or logical values but \nnot a mixture\n.\n\n\nThe c(...) operator can construct a vector from simple elements:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n c(1,1,2,3,5,8,13,21)\n[1] 1 1 2 3 5 8 13 21\n\n\n c(1*pi, 2*pi, 3*pi, 4*pi)\n[1] 3.141593 6.283185 9.424778 12.566371\n\n\n c(\nEveryone\n, \nloves\n, \nstats.\n)\n[1] \nEveryone\n \nloves\n \nstats.\n\n\n\n c(TRUE,TRUE,FALSE,TRUE)\n[1] TRUE TRUE FALSE TRUE\n\n\n\n\n\n\n\n\n\nIf the arguments to \nc(...)\n are themselves vectors, it flattens them and combines them into one single vector:\n\n\n1\n2\n3\n4\n v1 \n-\n \nc\n(\n1\n,\n2\n,\n3\n)\n\n\n v2 \n-\n \nc\n(\n4\n,\n5\n,\n6\n)\n\n\n \nc\n(\nv1\n,\nv2\n)\n\n\n[\n1\n]\n \n1\n \n2\n \n3\n \n4\n \n5\n \n6\n\n\n\n\n\n\n\n\n\n\nVectors cannot contain a mix of data types, such as numbers and strings. If you create a vector from mixed elements, R will try to accommodate you by converting one of them:\n\n\n1\n2\n3\n4\n v1 \n-\n \nc\n(\n1\n,\n2\n,\n3\n)\n\n\n v3 \n-\n \nc\n(\nA\n,\nB\n,\nC\n)\n\n\n \nc\n(\nv1\n,\nv3\n)\n\n\n[\n1\n]\n \n1\n \n2\n \n3\n \nA\n \nB\n \nC\n\n\n\n\n\n\n\nHere, the user tried to create a vector from both numbers and strings. R converted all the numbers to strings before creating the vector, thereby making the data elements compatible.\n\n\n\n\n\nTechnically speaking, two data elements can coexist in a vector only if they have the same mode. The modes of \n3.1415\n and \n\"foo\"\n are numeric and character, respectively:\n\n\n1\n2\n3\n4\n5\n mode(3.1415)\n[1] \nnumeric\n\n\n\n mode(\nfoo\n)\n[1] \ncharacter\n\n\n\n\n\n\n\nThose modes are incompatible. To make a vector from them, R converts \n3.1415\n to character mode so it will be compatible with \n\"foo\"\n :\n\n\n1\n2\n3\n4\n c(3.1415, \nfoo\n)\n[1] \n3.1415\n \nfoo\n\n\n mode(c(3.1415, \nfoo\n))\n[1] \ncharacter", 
            "title": "Day 5 : Creating a Vector"
        }, 
        {
            "location": "/Some-Basics/day5/#day-5-creating-a-vector", 
            "text": "", 
            "title": "Day 5 : Creating a Vector"
        }, 
        {
            "location": "/Some-Basics/day5/#problem", 
            "text": "How can we create a vector?", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day5/#solution", 
            "text": "Use the  c(...)  operator to construct a vector from given values.", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day5/#discussion", 
            "text": "Vectors are a central component of R, not just another data structure. A vector can contain either numbers, strings, or logical values but  not a mixture .  The c(...) operator can construct a vector from simple elements:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11  c(1,1,2,3,5,8,13,21)\n[1] 1 1 2 3 5 8 13 21  c(1*pi, 2*pi, 3*pi, 4*pi)\n[1] 3.141593 6.283185 9.424778 12.566371  c( Everyone ,  loves ,  stats. )\n[1]  Everyone   loves   stats.   c(TRUE,TRUE,FALSE,TRUE)\n[1] TRUE TRUE FALSE TRUE    If the arguments to  c(...)  are themselves vectors, it flattens them and combines them into one single vector:  1\n2\n3\n4  v1  -   c ( 1 , 2 , 3 )   v2  -   c ( 4 , 5 , 6 )    c ( v1 , v2 )  [ 1 ]   1   2   3   4   5   6     Vectors cannot contain a mix of data types, such as numbers and strings. If you create a vector from mixed elements, R will try to accommodate you by converting one of them:  1\n2\n3\n4  v1  -   c ( 1 , 2 , 3 )   v3  -   c ( A , B , C )    c ( v1 , v3 )  [ 1 ]   1   2   3   A   B   C    Here, the user tried to create a vector from both numbers and strings. R converted all the numbers to strings before creating the vector, thereby making the data elements compatible.   Technically speaking, two data elements can coexist in a vector only if they have the same mode. The modes of  3.1415  and  \"foo\"  are numeric and character, respectively:  1\n2\n3\n4\n5  mode(3.1415)\n[1]  numeric   mode( foo )\n[1]  character    Those modes are incompatible. To make a vector from them, R converts  3.1415  to character mode so it will be compatible with  \"foo\"  :  1\n2\n3\n4  c(3.1415,  foo )\n[1]  3.1415   foo   mode(c(3.1415,  foo ))\n[1]  character", 
            "title": "Discussion"
        }, 
        {
            "location": "/Some-Basics/day6/", 
            "text": "Day 6 : Computing Basic Statistics\n\n\nProblem\n\n\nHow can we calculate the basic summary numbers like:\n\n\n\n\nMean\n\n\nMedian\n\n\nStandard Deviation\n\n\nVariance\n\n\nCorrelation\n\n\nCovariance\n\n\n\n\nSolution\n\n\nIf \nx\n and \ny\n are vectors, then we can use one of these functions:\n\n\n\n\nmean(x)\n\n\nmedian(x)\n\n\nsd(x)\n\n\nvar(x)\n\n\ncor(x, y)\n\n\ncov(x, y)", 
            "title": "Day 6 : Computing Basic Statistics"
        }, 
        {
            "location": "/Some-Basics/day6/#day-6-computing-basic-statistics", 
            "text": "", 
            "title": "Day 6 : Computing Basic Statistics"
        }, 
        {
            "location": "/Some-Basics/day6/#problem", 
            "text": "How can we calculate the basic summary numbers like:   Mean  Median  Standard Deviation  Variance  Correlation  Covariance", 
            "title": "Problem"
        }, 
        {
            "location": "/Some-Basics/day6/#solution", 
            "text": "If  x  and  y  are vectors, then we can use one of these functions:   mean(x)  median(x)  sd(x)  var(x)  cor(x, y)  cov(x, y)", 
            "title": "Solution"
        }, 
        {
            "location": "/Some-Basics/day7/", 
            "text": "Day 7 : Creating Sequence\n\n\nWork in Progress", 
            "title": "Day 7 : Creating Sequence"
        }, 
        {
            "location": "/Some-Basics/day7/#day-7-creating-sequence", 
            "text": "Work in Progress", 
            "title": "Day 7 : Creating Sequence"
        }, 
        {
            "location": "/Some-Basics/day8/", 
            "text": "Day 8 : Comparing Vectors\n\n\nWork in Progress", 
            "title": "Day 8 : Comparing Vectors"
        }, 
        {
            "location": "/Some-Basics/day8/#day-8-comparing-vectors", 
            "text": "Work in Progress", 
            "title": "Day 8 : Comparing Vectors"
        }, 
        {
            "location": "/Some-Basics/day9/", 
            "text": "Day 9 : Selecting Vector Elements\n\n\nWork in Progress", 
            "title": "Day 9 : Selecting Vector Elements"
        }, 
        {
            "location": "/Some-Basics/day9/#day-9-selecting-vector-elements", 
            "text": "Work in Progress", 
            "title": "Day 9 : Selecting Vector Elements"
        }, 
        {
            "location": "/Some-Basics/day10/", 
            "text": "Day 10 : Performing Vector Arithmetic\n\n\nWork in Progress", 
            "title": "Day 10 : Performing Vector Arithmetic"
        }, 
        {
            "location": "/Some-Basics/day10/#day-10-performing-vector-arithmetic", 
            "text": "Work in Progress", 
            "title": "Day 10 : Performing Vector Arithmetic"
        }, 
        {
            "location": "/Some-Basics/day11/", 
            "text": "Day 11 : Getting Operator Precedence Right\n\n\nWork in Progress", 
            "title": "Day 11 : Getting Operator Precedence Right"
        }, 
        {
            "location": "/Some-Basics/day11/#day-11-getting-operator-precedence-right", 
            "text": "Work in Progress", 
            "title": "Day 11 : Getting Operator Precedence Right"
        }, 
        {
            "location": "/Some-Basics/day12/", 
            "text": "Day 12 : Defining a Function\n\n\nWork in Progress", 
            "title": "Day 12 : Defining a Function"
        }, 
        {
            "location": "/Some-Basics/day12/#day-12-defining-a-function", 
            "text": "Work in Progress", 
            "title": "Day 12 : Defining a Function"
        }, 
        {
            "location": "/Some-Basics/day13/", 
            "text": "Day 13 : Typing Less \n Accomplish More\n\n\nWork in Progress", 
            "title": "Day 13 : Typing Less & Accomplish More"
        }, 
        {
            "location": "/Some-Basics/day13/#day-13-typing-less-accomplish-more", 
            "text": "Work in Progress", 
            "title": "Day 13 : Typing Less &amp; Accomplish More"
        }, 
        {
            "location": "/Some-Basics/day14/", 
            "text": "Day 14 : Avoiding Some Common Mistakes\n\n\nWork in Progress", 
            "title": "Day 14 : Avoiding Some Common Mistakes"
        }, 
        {
            "location": "/Some-Basics/day14/#day-14-avoiding-some-common-mistakes", 
            "text": "Work in Progress", 
            "title": "Day 14 : Avoiding Some Common Mistakes"
        }, 
        {
            "location": "/Assignments/Assignment1/", 
            "text": "Assignment 1: Mayan Tomb Mystery\n\n\nProblem\n\n\nAyan, the adventurer, is one step away from solving the mystery of an ancient Mayan tomb. He just approached the secret chamber where the secret Mayan scriptures are locked in a chest.\n\n\nThere are \n\\(N\\)\n ancient statues in the room. After long thought, Ayan figured out that in order to open the treasure chest he needs to stand in the middle of the room and hit every statue with a laser ray at the same time.\n\n\nAyan is a highly experienced adventurer, so setting multiple laser rays at the same time is not a problem for him. Moreover, every ray that he creates is perfectly straight and never changes direction at all.\n\n\nThe middle of the room, where Ayan is standing, has coordinates \n\\((0, 0)\\)\n. Every statue is located at some point with coordinates \n\\((x, y)\\)\n. Each statue is made of pure glass, so that if any ray hits it, it doesn't stop, but goes through the statue and continues beyond in the same, unchanged direction.\n\n\nAyan wonders how he can hit every ancient statue in the room using the fewest possible rays. \n\n\nWhat should you do?\n\n\nWrite a function that takes input as a dataframe \n\\(A\\)\n (contains the location of statues) and returns the minimal number of rays that Ayan must set in order to hit every statue in the room.  \n\n\n1\n2\n3\nsolution \n-\n \nfunction\n(\nA\n)\n \n{\n\n    \n# write your code\n\n\n}\n\n\n\n\n\n\n\nFor example, given a dataframe \n\\(A\\)\n\n\n1\n2\n3\n4\n5\n6\n7\n A\n  x  y\n -1 -2\n  1  2\n  2  4\n -3  2\n  2 -2\n\n\n\n\n\n\nFunction should return the output as 4.", 
            "title": "Assignment 1: Mayan Tomb Mystery"
        }, 
        {
            "location": "/Assignments/Assignment1/#assignment-1-mayan-tomb-mystery", 
            "text": "", 
            "title": "Assignment 1: Mayan Tomb Mystery"
        }, 
        {
            "location": "/Assignments/Assignment1/#problem", 
            "text": "Ayan, the adventurer, is one step away from solving the mystery of an ancient Mayan tomb. He just approached the secret chamber where the secret Mayan scriptures are locked in a chest.  There are  \\(N\\)  ancient statues in the room. After long thought, Ayan figured out that in order to open the treasure chest he needs to stand in the middle of the room and hit every statue with a laser ray at the same time.  Ayan is a highly experienced adventurer, so setting multiple laser rays at the same time is not a problem for him. Moreover, every ray that he creates is perfectly straight and never changes direction at all.  The middle of the room, where Ayan is standing, has coordinates  \\((0, 0)\\) . Every statue is located at some point with coordinates  \\((x, y)\\) . Each statue is made of pure glass, so that if any ray hits it, it doesn't stop, but goes through the statue and continues beyond in the same, unchanged direction.  Ayan wonders how he can hit every ancient statue in the room using the fewest possible rays.", 
            "title": "Problem"
        }, 
        {
            "location": "/Assignments/Assignment1/#what-should-you-do", 
            "text": "Write a function that takes input as a dataframe  \\(A\\)  (contains the location of statues) and returns the minimal number of rays that Ayan must set in order to hit every statue in the room.    1\n2\n3 solution  -   function ( A )   { \n     # write your code  }    For example, given a dataframe  \\(A\\)  1\n2\n3\n4\n5\n6\n7  A\n  x  y\n -1 -2\n  1  2\n  2  4\n -3  2\n  2 -2   Function should return the output as 4.", 
            "title": "What should you do?"
        }
    ]
}